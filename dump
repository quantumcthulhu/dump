#!/usr/bin/env python3
import os
import pyperclip
import argparse

DEFAULT_EXTENSIONS = ['.py', '.cpp', '.hpp', '.c', '.h', '.java', 
                      '.js', '.ts', '.tsx', '.cs', '.aspx', 
                      '.php', '.rb', '.go', '.rs', '.swift', '.kt',
                      '.yml', '.yaml', 'Dockerfile']

def gather_files(directory='.', extensions=None):
    files = []
    for root, dirs, filenames in os.walk(directory):
        if 'node_modules' in dirs:
            dirs.remove('node_modules')
        for filename in filenames:
            if extensions is None or any(filename.endswith(ext) for ext in extensions):
                files.append(os.path.join(root, filename))
    return files

def format_file_content(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            return f"# {file_path}\n--------\n{content}\n--------\n"
    except Exception as e:
        return f"# {file_path}\n--------\nError reading file: {e}\n--------\n"

def copy_to_clipboard(output_text):
    try:
        pyperclip.copy(output_text)
        return True
    except pyperclip.PyperclipException:
        return False

def main(directory='.', extensions=None):
    files = gather_files(directory, extensions)
    output_text = "".join([format_file_content(f) for f in files])
    if copy_to_clipboard(output_text):
        return output_text, "Content copied to clipboard."
    return output_text, "Could not copy to clipboard."

# Argument parsing and script execution
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Recursively list source files and format their content.")
    parser.add_argument('extensions', nargs='*', default=DEFAULT_EXTENSIONS, 
                        help='Optional: Specify file extensions to search for (e.g., .py .cpp). Defaults to common source file types.')
    args = parser.parse_args()
    
    extensions = args.extensions if args.extensions else DEFAULT_EXTENSIONS
    output, clipboard_msg = main(extensions=extensions)
    print(output)
    print(clipboard_msg)
